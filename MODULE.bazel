module(
    name = "logos",
    version = "0.0.1",
)

bazel_dep(name = "platforms", version = "0.0.10")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

# rules_cc
bazel_dep(name = "rules_cc", version = "0.0.9")

# protobuf_javascript
http_archive(
    name = "protobuf_javascript_linux",
    build_file_content = """
exports_files(["bin/protoc-gen-js"])
    """,
    integrity = "sha256-9G19nXm98/MrdcnZx3R6h5NVbQEmE6Ciszz6fQMoKQs=",
    url = "https://github.com/protocolbuffers/protobuf-javascript/releases/download/v3.21.2/protobuf-javascript-3.21.2-linux-x86_64.tar.gz",
)

http_archive(
    name = "protobuf_javascript_osx",
    build_file_content = """
exports_files(["bin/protoc-gen-js"])
    """,
    integrity = "sha256-W7PscnoPUOeLjx4deSv1WEB3OBjZojEBO4AgCadpmNo=",
    url = "https://github.com/protocolbuffers/protobuf-javascript/releases/download/v3.21.2/protobuf-javascript-3.21.2-osx-x86_64.tar.gz",
)

# protoc_gen_jsonschema
http_archive(
    name = "protoc_gen_jsonschema",
    build_file_content = """
exports_files(["protoc-gen-jsonschema"])
    """,
    integrity = "sha256-atIi87sI2CWzZ4xXFimSJ30URBHIQnOKfHjwbr603D8=",
    url = "https://github.com/pubg/protoc-gen-jsonschema/releases/download/v0.5.0/protoc-gen-jsonschema_v0.5.0_linux_amd64.tar.gz",
)

# grpc_web
http_archive(
    name = "grpc_web",
    #sha256 = "",
    strip_prefix = "grpc-web-1.5.0",
    urls = ["https://github.com/grpc/grpc-web/archive/refs/tags/1.5.0.tar.gz"],
)

#kubectl
http_file(
    name = "kubectl_linux",
    executable = True,
    sha256 = "7fe3a762d926fb068bae32c399880e946e8caf3d903078bea9b169dcd5c17f6d",
    url = "https://dl.k8s.io/release/v1.27.1/bin/linux/amd64/kubectl",
)

http_file(
    name = "kubectl_osx",
    executable = True,
    sha256 = "136f73ede0d52c7985d299432236f891515c050d58d71b4a7d39c45085020ad8",
    url = "https://dl.k8s.io/release/v1.27.1/bin/darwin/amd64/kubectl",
)

# k8s cert-manager
http_file(
    name = "cert_manager",
    url = "https://github.com/cert-manager/cert-manager/releases/download/v1.15.2/cert-manager.yaml",
)

# minikube
http_file(
    name = "minikube_linux",
    executable = True,
    sha256 = "e53d9e8c31f4c5f683182f5323d3527aa0725f713945c6d081cf71aa548ab388",
    url = "https://github.com/kubernetes/minikube/releases/download/v1.30.1/minikube-linux-amd64",
)

http_file(
    name = "minikube_osx",
    executable = True,
    sha256 = "b5938a8772c5565b5d0b795938c367c5190bf65bb51fc55fb2417cb4e1d04ef1",
    url = "https://github.com/kubernetes/minikube/releases/download/v1.30.1/minikube-darwin-amd64",
)

# grpc-java
bazel_dep(name = "grpc-java", version = "1.64.0", repo_name = "io_grpc_grpc_java")

# rules_jvm_external
bazel_dep(name = "rules_jvm_external", version = "6.2")

MAVEN_AWSSDK_VERSION = "2.26.23"

MAVEN_SHARED = [
    "com.google.code.gson:gson:2.10.1",
    # guava must be explicitly specified or two separate versions will be pulled into the classpath and cause guice errors.
    "com.google.guava:guava:33.2.1-jre",
    "com.google.inject:guice:7.0.0",
    "org.slf4j:slf4j-api:2.0.7",
    "org.slf4j:slf4j-simple:2.0.7",
    "software.amazon.awssdk:auth:" + MAVEN_AWSSDK_VERSION,
    "software.amazon.awssdk:regions:" + MAVEN_AWSSDK_VERSION,
    "software.amazon.awssdk:route53:" + MAVEN_AWSSDK_VERSION,
    "software.amazon.awssdk:sso:" + MAVEN_AWSSDK_VERSION,
    "software.amazon.awssdk:ssooidc:" + MAVEN_AWSSDK_VERSION,
]

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    name = "maven_logos_app_controller",
    artifacts = MAVEN_SHARED + [
        "io.kubernetes:client-java:21.0.0",
        "io.kubernetes:client-java-api:21.0.0",
    ],
    fail_if_repin_required = True,
    fetch_javadoc = True,
    fetch_sources = True,
    generate_compat_repositories = True,
    lock_file = "//vendor/java:maven_logos_app_controller.json",
    repositories = [
        "https://repo.maven.apache.org/maven2/",
    ],
    version_conflict_policy = "pinned",
)
maven.install(
    name = "maven_logos",
    artifacts = MAVEN_SHARED + [
        "com.squareup:javapoet:1.13.0",
        "com.zaxxer:HikariCP:5.0.1",
        "dnsjava:dnsjava:3.5.2",
        "io.grpc:grpc-netty-shaded:1.66.0",
        "io.grpc:grpc-protobuf:1.66.0",
        "io.grpc:grpc-stub:1.66.0",
        "javax.annotation:javax.annotation-api:1.3.2",
        "javax.json:javax.json-api:1.1.4",
        "org.apache.tomcat:annotations-api:6.0.53",
        "org.jdbi:jdbi3-core:3.39.1",
        "org.jdbi:jdbi3-postgres:3.35.0",
        "org.junit.jupiter:junit-jupiter-api:5.9.3",
        "org.postgresql:postgresql:42.6.0",
        "org.reflections:reflections:0.10.2",
        "org.slf4j:slf4j-api:2.0.7",
        "org.slf4j:slf4j-simple:2.0.7",
        "software.amazon.awscdk:aws-cdk-lib:2.155.0",
        "software.amazon.awscdk:cdk-lambda-layer-kubectl-v30:2.0.1",
        "software.amazon.awssdk:cognitoidentityprovider:" + MAVEN_AWSSDK_VERSION,
        "software.amazon.awssdk:ec2:" + MAVEN_AWSSDK_VERSION,
        "software.amazon.awssdk:iam:" + MAVEN_AWSSDK_VERSION,
        "software.amazon.awssdk:rds:" + MAVEN_AWSSDK_VERSION,
        "software.amazon.awssdk:s3:" + MAVEN_AWSSDK_VERSION,
        "software.amazon.awssdk:secretsmanager:" + MAVEN_AWSSDK_VERSION,
        "software.amazon.awssdk:sts:" + MAVEN_AWSSDK_VERSION,
        "software.amazon.awssdk:utils:" + MAVEN_AWSSDK_VERSION,
        "software.constructs:constructs:10.3.0",
    ],
    fail_if_repin_required = True,
    fetch_javadoc = True,
    fetch_sources = True,
    generate_compat_repositories = True,
    lock_file = "//vendor/java:maven_install.json",
    repositories = [
        "https://repo.maven.apache.org/maven2/",
    ],
    version_conflict_policy = "pinned",
)
maven.artifact(
    artifact = "guava",
    force_version = True,
    group = "com.google.guava",
    version = "33.2.1-jre",
)
use_repo(
    maven,
    "maven_logos",
    "maven_logos_app_controller",
)

# rules_foreign_cc
bazel_dep(name = "rules_foreign_cc", version = "0.10.1")

# rules_proto
bazel_dep(name = "rules_proto", version = "6.0.0")

# protobuf
bazel_dep(name = "protobuf", version = "23.1", repo_name = "com_google_protobuf")

# stardoc
bazel_dep(name = "stardoc", version = "0.7.0")

# aspect_bazel_lib
bazel_dep(
    name = "aspect_bazel_lib",
    version = "2.7.7",
)

aspect_bazel_lib = use_extension("@aspect_bazel_lib//lib:extensions.bzl", "toolchains")
use_repo(aspect_bazel_lib, "coreutils_toolchains")
use_repo(aspect_bazel_lib, "jq_toolchains")
use_repo(aspect_bazel_lib, "yq_toolchains")

bazel_dep(
    name = "container_structure_test",
    version = "1.16.0",
)
bazel_dep(
    name = "gazelle",
    version = "0.34.0",
)
bazel_dep(
    name = "rules_pkg",
    version = "1.0.1",
)

# rules_js
bazel_dep(name = "rules_nodejs", version = "6.2.0")

node = use_extension(
    "@rules_nodejs//nodejs:extensions.bzl",
    "node",
    dev_dependency = True,
)
node.toolchain(
    name = "node_20_16",
    node_version = "20.16.0",
)

bazel_dep(name = "aspect_rules_js", version = "2.0.1")

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm_logos",
    generate_bzl_library_targets = True,
    npmrc = "@logos//:.npmrc",
    pnpm_lock = "@logos//:pnpm-lock.yaml",
    update_pnpm_lock = True,
    verify_node_modules_ignored = "@logos//:.bazelignore",
)
use_repo(npm, "npm_logos")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")

# rules_ts
bazel_dep(name = "aspect_rules_ts", version = "3.1.0")

rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext")
rules_ts_ext.deps(
    name = "npm_typescript_logos",  # naming works around bug in cross-workspace deps
    ts_version_from = "//:package.json",
)
use_repo(
    rules_ts_ext,
    npm_typescript = "npm_typescript_logos",
)

# aspect_rules_swc
bazel_dep(name = "aspect_rules_swc", version = "2.0.0")

# rules_rollup
bazel_dep(name = "aspect_rules_rollup", version = "2.0.0")

rollup_ext = use_extension("@aspect_rules_rollup//rollup:extensions.bzl", "ext")
rollup_ext.deps()

# rules_go
bazel_dep(
    name = "rules_go",
    version = "0.46.0",
)

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.20.3")

# rules_oci
bazel_dep(name = "rules_oci", version = "2.0.0")

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "alpine_image",
    digest = "sha256:c5c5fda71656f28e49ac9c5416b3643eaa6a108a8093151d6d1afc9463be8e33",
    image = "docker.io/library/alpine",
    # tag = "3.18",
)
use_repo(oci, "alpine_image")
oci.pull(
    name = "envoy_image_old",
    #digest = "sha256:5d5619b0d3d4311bfef48783c04df1e5aed71615710b876b951bd70c1e1e18ee",
    image = "docker.io/envoyproxy/envoy",
    platforms = ["linux/amd64"],
    tag = "tools-v1.29-latest",
)
use_repo(oci, "envoy_image_old")
oci.pull(
    name = "distroless_java_container",
    digest = "sha256:a0d63b02c21219ea735ff439fea518d6887ee1de0c7e57a578d27bfa87111573",
    image = "gcr.io/distroless/java17-debian11:debug",
    platforms = ["linux/amd64"],
    # tag = "latest",
)
use_repo(oci, "distroless_java_container")
oci.pull(
    name = "console_container",
    digest = "sha256:459be81018f0481adcf57ca0ab3e4fba19cfcc48f2280e1d672343d10dccb8a3",
    image = "docker.io/alpine/socat",
    # tag = "latest",
)
use_repo(oci, "console_container")
oci.pull(
    name = "nginx_container",
    digest = "sha256:e06ffa63074d69b12c7f7712d7aebc4cc72d25217e55788d54160a2bd77182f4",
    image = "docker.io/library/nginx",
    # tag = "stable-alpine",
)
use_repo(oci, "nginx_container")
oci.pull(
    name = "distroless_python_image",
    digest = "sha256:baac841d0711ecbb673fa410a04793f876a242a6ca801d148ef867f02745b156",
    image = "gcr.io/distroless/python3",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)
use_repo(oci, "distroless_java_container_linux_amd64", "distroless_python_image", "distroless_python_image_linux_amd64", "distroless_python_image_linux_arm64_v8", "envoy_image_old_linux_amd64")

# rules_apko
bazel_dep(
    name = "rules_apko",
    version = "1.2.1",
)

apk = use_extension("@rules_apko//apko:extensions.bzl", "apko")

# cronjob image
apk.translate_lock(
    name = "base_cronjob_image",
    lock = "//vendor/apko:base_cronjob.lock.json",
)
use_repo(apk, "base_cronjob_image")

# envoy image
apk.translate_lock(
    name = "envoy_image",
    lock = "//vendor/apko:envoy.lock.json",
)
use_repo(apk, "envoy_image")
